// Code generated by Prisma (prisma@1.20.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  document: (where?: DocumentWhereInput) => Promise<boolean>;
  documentType: (where?: DocumentTypeWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  profile: (where?: ProfileWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  document: (where: DocumentWhereUniqueInput) => DocumentPromise;
  documents: (
    args?: {
      where?: DocumentWhereInput;
      orderBy?: DocumentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Document>;
  documentsConnection: (
    args?: {
      where?: DocumentWhereInput;
      orderBy?: DocumentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DocumentConnectionPromise;
  documentType: (where: DocumentTypeWhereUniqueInput) => DocumentTypePromise;
  documentTypes: (
    args?: {
      where?: DocumentTypeWhereInput;
      orderBy?: DocumentTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<DocumentType>;
  documentTypesConnection: (
    args?: {
      where?: DocumentTypeWhereInput;
      orderBy?: DocumentTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DocumentTypeConnectionPromise;
  file: (where: FileWhereUniqueInput) => FilePromise;
  files: (
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<File>;
  filesConnection: (
    args?: {
      where?: FileWhereInput;
      orderBy?: FileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FileConnectionPromise;
  profile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  profiles: (
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Profile>;
  profilesConnection: (
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProfileConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDocument: (data: DocumentCreateInput) => DocumentPromise;
  updateDocument: (
    args: { data: DocumentUpdateInput; where: DocumentWhereUniqueInput }
  ) => DocumentPromise;
  updateManyDocuments: (
    args: { data: DocumentUpdateManyMutationInput; where?: DocumentWhereInput }
  ) => BatchPayloadPromise;
  upsertDocument: (
    args: {
      where: DocumentWhereUniqueInput;
      create: DocumentCreateInput;
      update: DocumentUpdateInput;
    }
  ) => DocumentPromise;
  deleteDocument: (where: DocumentWhereUniqueInput) => DocumentPromise;
  deleteManyDocuments: (where?: DocumentWhereInput) => BatchPayloadPromise;
  createDocumentType: (data: DocumentTypeCreateInput) => DocumentTypePromise;
  updateDocumentType: (
    args: { data: DocumentTypeUpdateInput; where: DocumentTypeWhereUniqueInput }
  ) => DocumentTypePromise;
  updateManyDocumentTypes: (
    args: {
      data: DocumentTypeUpdateManyMutationInput;
      where?: DocumentTypeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDocumentType: (
    args: {
      where: DocumentTypeWhereUniqueInput;
      create: DocumentTypeCreateInput;
      update: DocumentTypeUpdateInput;
    }
  ) => DocumentTypePromise;
  deleteDocumentType: (
    where: DocumentTypeWhereUniqueInput
  ) => DocumentTypePromise;
  deleteManyDocumentTypes: (
    where?: DocumentTypeWhereInput
  ) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (
    args: { data: FileUpdateInput; where: FileWhereUniqueInput }
  ) => FilePromise;
  updateManyFiles: (
    args: { data: FileUpdateManyMutationInput; where?: FileWhereInput }
  ) => BatchPayloadPromise;
  upsertFile: (
    args: {
      where: FileWhereUniqueInput;
      create: FileCreateInput;
      update: FileUpdateInput;
    }
  ) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createProfile: (data: ProfileCreateInput) => ProfilePromise;
  updateProfile: (
    args: { data: ProfileUpdateInput; where: ProfileWhereUniqueInput }
  ) => ProfilePromise;
  updateManyProfiles: (
    args: { data: ProfileUpdateManyMutationInput; where?: ProfileWhereInput }
  ) => BatchPayloadPromise;
  upsertProfile: (
    args: {
      where: ProfileWhereUniqueInput;
      create: ProfileCreateInput;
      update: ProfileUpdateInput;
    }
  ) => ProfilePromise;
  deleteProfile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  deleteManyProfiles: (where?: ProfileWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  document: (
    where?: DocumentSubscriptionWhereInput
  ) => DocumentSubscriptionPayloadSubscription;
  documentType: (
    where?: DocumentTypeSubscriptionWhereInput
  ) => DocumentTypeSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  profile: (
    where?: ProfileSubscriptionWhereInput
  ) => ProfileSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "EDITOR" | "USER" | "UNAUTHORIZED";

export type DocumentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "publishDate_ASC"
  | "publishDate_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DocumentTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC"
  | "key_ASC"
  | "key_DESC"
  | "etag_ASC"
  | "etag_DESC"
  | "bucket_ASC"
  | "bucket_DESC"
  | "size_ASC"
  | "size_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "dateOfBirth_ASC"
  | "dateOfBirth_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "lastLogin_ASC"
  | "lastLogin_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "role_ASC"
  | "role_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneWithoutDocumentsInput {
  create?: UserCreateWithoutDocumentsInput;
  update?: UserUpdateWithoutDocumentsDataInput;
  upsert?: UserUpsertWithoutDocumentsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export type DocumentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FileUpdateOneInput {
  create?: FileCreateInput;
  update?: FileUpdateDataInput;
  upsert?: FileUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: FileWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  lastLogin?: DateTimeInput;
  lastLogin_not?: DateTimeInput;
  lastLogin_in?: DateTimeInput[] | DateTimeInput;
  lastLogin_not_in?: DateTimeInput[] | DateTimeInput;
  lastLogin_lt?: DateTimeInput;
  lastLogin_lte?: DateTimeInput;
  lastLogin_gt?: DateTimeInput;
  lastLogin_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  profile?: ProfileWhereInput;
  documents_every?: DocumentWhereInput;
  documents_some?: DocumentWhereInput;
  documents_none?: DocumentWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface FileUpdateDataInput {
  mimetype?: String;
  encoding?: String;
  key?: String;
  etag?: String;
  bucket?: String;
  size?: Int;
  url?: String;
}

export interface FileWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  mimetype?: String;
  mimetype_not?: String;
  mimetype_in?: String[] | String;
  mimetype_not_in?: String[] | String;
  mimetype_lt?: String;
  mimetype_lte?: String;
  mimetype_gt?: String;
  mimetype_gte?: String;
  mimetype_contains?: String;
  mimetype_not_contains?: String;
  mimetype_starts_with?: String;
  mimetype_not_starts_with?: String;
  mimetype_ends_with?: String;
  mimetype_not_ends_with?: String;
  encoding?: String;
  encoding_not?: String;
  encoding_in?: String[] | String;
  encoding_not_in?: String[] | String;
  encoding_lt?: String;
  encoding_lte?: String;
  encoding_gt?: String;
  encoding_gte?: String;
  encoding_contains?: String;
  encoding_not_contains?: String;
  encoding_starts_with?: String;
  encoding_not_starts_with?: String;
  encoding_ends_with?: String;
  encoding_not_ends_with?: String;
  key?: String;
  key_not?: String;
  key_in?: String[] | String;
  key_not_in?: String[] | String;
  key_lt?: String;
  key_lte?: String;
  key_gt?: String;
  key_gte?: String;
  key_contains?: String;
  key_not_contains?: String;
  key_starts_with?: String;
  key_not_starts_with?: String;
  key_ends_with?: String;
  key_not_ends_with?: String;
  etag?: String;
  etag_not?: String;
  etag_in?: String[] | String;
  etag_not_in?: String[] | String;
  etag_lt?: String;
  etag_lte?: String;
  etag_gt?: String;
  etag_gte?: String;
  etag_contains?: String;
  etag_not_contains?: String;
  etag_starts_with?: String;
  etag_not_starts_with?: String;
  etag_ends_with?: String;
  etag_not_ends_with?: String;
  bucket?: String;
  bucket_not?: String;
  bucket_in?: String[] | String;
  bucket_not_in?: String[] | String;
  bucket_lt?: String;
  bucket_lte?: String;
  bucket_gt?: String;
  bucket_gte?: String;
  bucket_contains?: String;
  bucket_not_contains?: String;
  bucket_starts_with?: String;
  bucket_not_starts_with?: String;
  bucket_ends_with?: String;
  bucket_not_ends_with?: String;
  size?: Int;
  size_not?: Int;
  size_in?: Int[] | Int;
  size_not_in?: Int[] | Int;
  size_lt?: Int;
  size_lte?: Int;
  size_gt?: Int;
  size_gte?: Int;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: FileWhereInput[] | FileWhereInput;
  OR?: FileWhereInput[] | FileWhereInput;
  NOT?: FileWhereInput[] | FileWhereInput;
}

export interface FileUpsertNestedInput {
  update: FileUpdateDataInput;
  create: FileCreateInput;
}

export interface DocumentTypeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  documents_every?: DocumentWhereInput;
  documents_some?: DocumentWhereInput;
  documents_none?: DocumentWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: DocumentTypeWhereInput[] | DocumentTypeWhereInput;
  OR?: DocumentTypeWhereInput[] | DocumentTypeWhereInput;
  NOT?: DocumentTypeWhereInput[] | DocumentTypeWhereInput;
}

export interface DocumentTypeCreateWithoutDocumentsInput {
  title: String;
}

export interface DocumentUpdateWithoutTypeDataInput {
  publishDate?: DateTimeInput;
  title?: String;
  author?: UserUpdateOneWithoutDocumentsInput;
}

export interface UserCreateOneWithoutDocumentsInput {
  create?: UserCreateWithoutDocumentsInput;
  connect?: UserWhereUniqueInput;
}

export interface ProfileUpsertWithoutUserInput {
  update: ProfileUpdateWithoutUserDataInput;
  create: ProfileCreateWithoutUserInput;
}

export interface UserCreateWithoutDocumentsInput {
  email: String;
  password: String;
  lastLogin?: DateTimeInput;
  role?: Role;
  profile: ProfileCreateOneWithoutUserInput;
}

export interface ProfileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProfileWhereInput;
  AND?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput;
  OR?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput;
  NOT?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput;
}

export interface ProfileCreateOneWithoutUserInput {
  create?: ProfileCreateWithoutUserInput;
  connect?: ProfileWhereUniqueInput;
}

export interface DocumentTypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DocumentTypeWhereInput;
  AND?:
    | DocumentTypeSubscriptionWhereInput[]
    | DocumentTypeSubscriptionWhereInput;
  OR?:
    | DocumentTypeSubscriptionWhereInput[]
    | DocumentTypeSubscriptionWhereInput;
  NOT?:
    | DocumentTypeSubscriptionWhereInput[]
    | DocumentTypeSubscriptionWhereInput;
}

export interface ProfileCreateWithoutUserInput {
  firstName?: String;
  lastName?: String;
  dateOfBirth?: DateTimeInput;
  avatar?: FileCreateOneInput;
}

export type DocumentTypeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FileCreateOneInput {
  create?: FileCreateInput;
  connect?: FileWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  lastLogin?: DateTimeInput;
  role?: Role;
}

export interface FileCreateInput {
  mimetype: String;
  encoding: String;
  key: String;
  etag: String;
  bucket: String;
  size: Int;
  url: String;
}

export interface UserCreateInput {
  email: String;
  password: String;
  lastLogin?: DateTimeInput;
  role?: Role;
  profile: ProfileCreateOneWithoutUserInput;
  documents?: DocumentCreateManyWithoutAuthorInput;
}

export interface DocumentUpdateInput {
  publishDate?: DateTimeInput;
  title?: String;
  type?: DocumentTypeUpdateOneRequiredWithoutDocumentsInput;
  author?: UserUpdateOneWithoutDocumentsInput;
}

export interface ProfileUpdateManyMutationInput {
  firstName?: String;
  lastName?: String;
  dateOfBirth?: DateTimeInput;
}

export interface DocumentTypeUpdateOneRequiredWithoutDocumentsInput {
  create?: DocumentTypeCreateWithoutDocumentsInput;
  update?: DocumentTypeUpdateWithoutDocumentsDataInput;
  upsert?: DocumentTypeUpsertWithoutDocumentsInput;
  connect?: DocumentTypeWhereUniqueInput;
}

export interface DocumentUpsertWithWhereUniqueWithoutAuthorInput {
  where: DocumentWhereUniqueInput;
  update: DocumentUpdateWithoutAuthorDataInput;
  create: DocumentCreateWithoutAuthorInput;
}

export interface DocumentTypeUpdateWithoutDocumentsDataInput {
  title?: String;
}

export type ProfileWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DocumentTypeUpsertWithoutDocumentsInput {
  update: DocumentTypeUpdateWithoutDocumentsDataInput;
  create: DocumentTypeCreateWithoutDocumentsInput;
}

export interface DocumentUpdateManyWithoutAuthorInput {
  create?:
    | DocumentCreateWithoutAuthorInput[]
    | DocumentCreateWithoutAuthorInput;
  delete?: DocumentWhereUniqueInput[] | DocumentWhereUniqueInput;
  connect?: DocumentWhereUniqueInput[] | DocumentWhereUniqueInput;
  disconnect?: DocumentWhereUniqueInput[] | DocumentWhereUniqueInput;
  update?:
    | DocumentUpdateWithWhereUniqueWithoutAuthorInput[]
    | DocumentUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | DocumentUpsertWithWhereUniqueWithoutAuthorInput[]
    | DocumentUpsertWithWhereUniqueWithoutAuthorInput;
}

export interface UserCreateOneWithoutProfileInput {
  create?: UserCreateWithoutProfileInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutProfileInput {
  create?: UserCreateWithoutProfileInput;
  update?: UserUpdateWithoutProfileDataInput;
  upsert?: UserUpsertWithoutProfileInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutDocumentsDataInput {
  email?: String;
  password?: String;
  lastLogin?: DateTimeInput;
  role?: Role;
  profile?: ProfileUpdateOneRequiredWithoutUserInput;
}

export interface ProfileUpdateInput {
  firstName?: String;
  lastName?: String;
  dateOfBirth?: DateTimeInput;
  user?: UserUpdateOneRequiredWithoutProfileInput;
  avatar?: FileUpdateOneInput;
}

export interface ProfileUpdateOneRequiredWithoutUserInput {
  create?: ProfileCreateWithoutUserInput;
  update?: ProfileUpdateWithoutUserDataInput;
  upsert?: ProfileUpsertWithoutUserInput;
  connect?: ProfileWhereUniqueInput;
}

export interface DocumentCreateManyWithoutAuthorInput {
  create?:
    | DocumentCreateWithoutAuthorInput[]
    | DocumentCreateWithoutAuthorInput;
  connect?: DocumentWhereUniqueInput[] | DocumentWhereUniqueInput;
}

export interface ProfileUpdateWithoutUserDataInput {
  firstName?: String;
  lastName?: String;
  dateOfBirth?: DateTimeInput;
  avatar?: FileUpdateOneInput;
}

export interface DocumentTypeCreateOneWithoutDocumentsInput {
  create?: DocumentTypeCreateWithoutDocumentsInput;
  connect?: DocumentTypeWhereUniqueInput;
}

export interface ProfileWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  dateOfBirth?: DateTimeInput;
  dateOfBirth_not?: DateTimeInput;
  dateOfBirth_in?: DateTimeInput[] | DateTimeInput;
  dateOfBirth_not_in?: DateTimeInput[] | DateTimeInput;
  dateOfBirth_lt?: DateTimeInput;
  dateOfBirth_lte?: DateTimeInput;
  dateOfBirth_gt?: DateTimeInput;
  dateOfBirth_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  user?: UserWhereInput;
  avatar?: FileWhereInput;
  AND?: ProfileWhereInput[] | ProfileWhereInput;
  OR?: ProfileWhereInput[] | ProfileWhereInput;
  NOT?: ProfileWhereInput[] | ProfileWhereInput;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FileWhereInput;
  AND?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
  OR?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
  NOT?: FileSubscriptionWhereInput[] | FileSubscriptionWhereInput;
}

export interface ProfileCreateInput {
  firstName?: String;
  lastName?: String;
  dateOfBirth?: DateTimeInput;
  user: UserCreateOneWithoutProfileInput;
  avatar?: FileCreateOneInput;
}

export interface DocumentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  publishDate?: DateTimeInput;
  publishDate_not?: DateTimeInput;
  publishDate_in?: DateTimeInput[] | DateTimeInput;
  publishDate_not_in?: DateTimeInput[] | DateTimeInput;
  publishDate_lt?: DateTimeInput;
  publishDate_lte?: DateTimeInput;
  publishDate_gt?: DateTimeInput;
  publishDate_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  type?: DocumentTypeWhereInput;
  author?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: DocumentWhereInput[] | DocumentWhereInput;
  OR?: DocumentWhereInput[] | DocumentWhereInput;
  NOT?: DocumentWhereInput[] | DocumentWhereInput;
}

export interface FileUpdateManyMutationInput {
  mimetype?: String;
  encoding?: String;
  key?: String;
  etag?: String;
  bucket?: String;
  size?: Int;
  url?: String;
}

export type FileWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface FileUpdateInput {
  mimetype?: String;
  encoding?: String;
  key?: String;
  etag?: String;
  bucket?: String;
  size?: Int;
  url?: String;
}

export interface DocumentUpdateWithoutAuthorDataInput {
  publishDate?: DateTimeInput;
  title?: String;
  type?: DocumentTypeUpdateOneRequiredWithoutDocumentsInput;
}

export interface UserUpsertWithoutDocumentsInput {
  update: UserUpdateWithoutDocumentsDataInput;
  create: UserCreateWithoutDocumentsInput;
}

export interface UserUpdateWithoutProfileDataInput {
  email?: String;
  password?: String;
  lastLogin?: DateTimeInput;
  role?: Role;
  documents?: DocumentUpdateManyWithoutAuthorInput;
}

export interface DocumentUpdateManyMutationInput {
  publishDate?: DateTimeInput;
  title?: String;
}

export interface DocumentCreateWithoutAuthorInput {
  publishDate: DateTimeInput;
  title: String;
  type: DocumentTypeCreateOneWithoutDocumentsInput;
}

export interface DocumentTypeUpdateManyMutationInput {
  title?: String;
}

export interface DocumentCreateInput {
  publishDate: DateTimeInput;
  title: String;
  type: DocumentTypeCreateOneWithoutDocumentsInput;
  author?: UserCreateOneWithoutDocumentsInput;
}

export interface DocumentUpsertWithWhereUniqueWithoutTypeInput {
  where: DocumentWhereUniqueInput;
  update: DocumentUpdateWithoutTypeDataInput;
  create: DocumentCreateWithoutTypeInput;
}

export interface DocumentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DocumentWhereInput;
  AND?: DocumentSubscriptionWhereInput[] | DocumentSubscriptionWhereInput;
  OR?: DocumentSubscriptionWhereInput[] | DocumentSubscriptionWhereInput;
  NOT?: DocumentSubscriptionWhereInput[] | DocumentSubscriptionWhereInput;
}

export interface DocumentTypeCreateInput {
  title: String;
  documents?: DocumentCreateManyWithoutTypeInput;
}

export interface UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput;
  create: UserCreateWithoutProfileInput;
}

export interface DocumentCreateManyWithoutTypeInput {
  create?: DocumentCreateWithoutTypeInput[] | DocumentCreateWithoutTypeInput;
  connect?: DocumentWhereUniqueInput[] | DocumentWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface DocumentUpdateWithWhereUniqueWithoutTypeInput {
  where: DocumentWhereUniqueInput;
  data: DocumentUpdateWithoutTypeDataInput;
}

export interface DocumentUpdateManyWithoutTypeInput {
  create?: DocumentCreateWithoutTypeInput[] | DocumentCreateWithoutTypeInput;
  delete?: DocumentWhereUniqueInput[] | DocumentWhereUniqueInput;
  connect?: DocumentWhereUniqueInput[] | DocumentWhereUniqueInput;
  disconnect?: DocumentWhereUniqueInput[] | DocumentWhereUniqueInput;
  update?:
    | DocumentUpdateWithWhereUniqueWithoutTypeInput[]
    | DocumentUpdateWithWhereUniqueWithoutTypeInput;
  upsert?:
    | DocumentUpsertWithWhereUniqueWithoutTypeInput[]
    | DocumentUpsertWithWhereUniqueWithoutTypeInput;
}

export interface DocumentTypeUpdateInput {
  title?: String;
  documents?: DocumentUpdateManyWithoutTypeInput;
}

export interface DocumentCreateWithoutTypeInput {
  publishDate: DateTimeInput;
  title: String;
  author?: UserCreateOneWithoutDocumentsInput;
}

export interface UserCreateWithoutProfileInput {
  email: String;
  password: String;
  lastLogin?: DateTimeInput;
  role?: Role;
  documents?: DocumentCreateManyWithoutAuthorInput;
}

export interface DocumentUpdateWithWhereUniqueWithoutAuthorInput {
  where: DocumentWhereUniqueInput;
  data: DocumentUpdateWithoutAuthorDataInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  lastLogin?: DateTimeInput;
  role?: Role;
  profile?: ProfileUpdateOneRequiredWithoutUserInput;
  documents?: DocumentUpdateManyWithoutAuthorInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  lastLogin?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  role: Role;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  lastLogin: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  lastLogin: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface AggregateDocumentType {
  count: Int;
}

export interface AggregateDocumentTypePromise
  extends Promise<AggregateDocumentType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDocumentTypeSubscription
  extends Promise<AsyncIterator<AggregateDocumentType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Profile {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  dateOfBirth?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProfilePromise extends Promise<Profile>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  dateOfBirth: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = User>() => T;
  avatar: <T = File>() => T;
}

export interface ProfileSubscription
  extends Promise<AsyncIterator<Profile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  dateOfBirth: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  avatar: <T = FileSubscription>() => T;
}

export interface DocumentTypeEdge {
  cursor: String;
}

export interface DocumentTypeEdgePromise
  extends Promise<DocumentTypeEdge>,
    Fragmentable {
  node: <T = DocumentType>() => T;
  cursor: () => Promise<String>;
}

export interface DocumentTypeEdgeSubscription
  extends Promise<AsyncIterator<DocumentTypeEdge>>,
    Fragmentable {
  node: <T = DocumentTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface File {
  id: ID_Output;
  mimetype: String;
  encoding: String;
  key: String;
  etag: String;
  bucket: String;
  size: Int;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  key: () => Promise<String>;
  etag: () => Promise<String>;
  bucket: () => Promise<String>;
  size: () => Promise<Int>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  etag: () => Promise<AsyncIterator<String>>;
  bucket: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  lastLogin?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  role: Role;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  lastLogin: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  role: () => Promise<Role>;
  profile: <T = Profile>() => T;
  documents: <T = FragmentableArray<Document>>(
    args?: {
      where?: DocumentWhereInput;
      orderBy?: DocumentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  lastLogin: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  role: () => Promise<AsyncIterator<Role>>;
  profile: <T = ProfileSubscription>() => T;
  documents: <T = Promise<AsyncIterator<DocumentSubscription>>>(
    args?: {
      where?: DocumentWhereInput;
      orderBy?: DocumentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface DocumentTypeConnection {}

export interface DocumentTypeConnectionPromise
  extends Promise<DocumentTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<DocumentTypeEdge>>() => T;
  aggregate: <T = AggregateDocumentType>() => T;
}

export interface DocumentTypeConnectionSubscription
  extends Promise<AsyncIterator<DocumentTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DocumentTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDocumentTypeSubscription>() => T;
}

export interface ProfilePreviousValues {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  dateOfBirth?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProfilePreviousValuesPromise
  extends Promise<ProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  dateOfBirth: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  dateOfBirth: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDocument {
  count: Int;
}

export interface AggregateDocumentPromise
  extends Promise<AggregateDocument>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDocumentSubscription
  extends Promise<AsyncIterator<AggregateDocument>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Document {
  id: ID_Output;
  publishDate: DateTimeOutput;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DocumentPromise extends Promise<Document>, Fragmentable {
  id: () => Promise<ID_Output>;
  publishDate: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  type: <T = DocumentType>() => T;
  author: <T = User>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DocumentSubscription
  extends Promise<AsyncIterator<Document>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  publishDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  type: <T = DocumentTypeSubscription>() => T;
  author: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProfileEdge {
  cursor: String;
}

export interface ProfileEdgePromise extends Promise<ProfileEdge>, Fragmentable {
  node: <T = Profile>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileEdgeSubscription
  extends Promise<AsyncIterator<ProfileEdge>>,
    Fragmentable {
  node: <T = ProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DocumentSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface DocumentSubscriptionPayloadPromise
  extends Promise<DocumentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Document>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DocumentPreviousValues>() => T;
}

export interface DocumentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DocumentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DocumentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DocumentPreviousValuesSubscription>() => T;
}

export interface DocumentConnection {}

export interface DocumentConnectionPromise
  extends Promise<DocumentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<DocumentEdge>>() => T;
  aggregate: <T = AggregateDocument>() => T;
}

export interface DocumentConnectionSubscription
  extends Promise<AsyncIterator<DocumentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DocumentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDocumentSubscription>() => T;
}

export interface DocumentPreviousValues {
  id: ID_Output;
  publishDate: DateTimeOutput;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DocumentPreviousValuesPromise
  extends Promise<DocumentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  publishDate: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DocumentPreviousValuesSubscription
  extends Promise<AsyncIterator<DocumentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  publishDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FileEdge {
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = File>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DocumentEdge {
  cursor: String;
}

export interface DocumentEdgePromise
  extends Promise<DocumentEdge>,
    Fragmentable {
  node: <T = Document>() => T;
  cursor: () => Promise<String>;
}

export interface DocumentEdgeSubscription
  extends Promise<AsyncIterator<DocumentEdge>>,
    Fragmentable {
  node: <T = DocumentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DocumentType {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DocumentTypePromise
  extends Promise<DocumentType>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  documents: <T = FragmentableArray<Document>>(
    args?: {
      where?: DocumentWhereInput;
      orderBy?: DocumentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DocumentTypeSubscription
  extends Promise<AsyncIterator<DocumentType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  documents: <T = Promise<AsyncIterator<DocumentSubscription>>>(
    args?: {
      where?: DocumentWhereInput;
      orderBy?: DocumentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DocumentTypeSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface DocumentTypeSubscriptionPayloadPromise
  extends Promise<DocumentTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DocumentType>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DocumentTypePreviousValues>() => T;
}

export interface DocumentTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DocumentTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DocumentTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DocumentTypePreviousValuesSubscription>() => T;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ProfileConnection {}

export interface ProfileConnectionPromise
  extends Promise<ProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ProfileEdge>>() => T;
  aggregate: <T = AggregateProfile>() => T;
}

export interface ProfileConnectionSubscription
  extends Promise<AsyncIterator<ProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  mimetype: String;
  encoding: String;
  key: String;
  etag: String;
  bucket: String;
  size: Int;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
  key: () => Promise<String>;
  etag: () => Promise<String>;
  bucket: () => Promise<String>;
  size: () => Promise<Int>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
  key: () => Promise<AsyncIterator<String>>;
  etag: () => Promise<AsyncIterator<String>>;
  bucket: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<Int>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = File>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValues>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ProfileSubscriptionPayloadPromise
  extends Promise<ProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Profile>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePreviousValues>() => T;
}

export interface ProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePreviousValuesSubscription>() => T;
}

export interface DocumentTypePreviousValues {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DocumentTypePreviousValuesPromise
  extends Promise<DocumentTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DocumentTypePreviousValuesSubscription
  extends Promise<AsyncIterator<DocumentTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateProfile {
  count: Int;
}

export interface AggregateProfilePromise
  extends Promise<AggregateProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileSubscription
  extends Promise<AsyncIterator<AggregateProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FileConnection {}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFile>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
