// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { Session } from '../models';
import { User, Document, Profile, File } from './prisma-client';
import { Context } from '../context';

type Role = 'ADMIN' | 'EDITOR' | 'USER' | 'VIEWER' | 'UNAUTHORIZED';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsUser {
    id: string;
  }

  export interface ArgsDocument {
    id: string;
  }

  export type SessionResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Session | null | Promise<Session | null>;

  export type FilesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => File[] | Promise<File[]>;

  export type UserResolver = (
    parent: undefined,
    args: ArgsUser,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | null | Promise<User | null>;

  export type UsersResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User[] | Promise<User[]>;

  export type DocumentResolver = (
    parent: undefined,
    args: ArgsDocument,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Document | null | Promise<Document | null>;

  export type DocumentsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Document[] | Promise<Document[]>;

  export interface Type {
    session: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Session | null | Promise<Session | null>;

    files: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => File[] | Promise<File[]>;

    user: (
      parent: undefined,
      args: ArgsUser,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | null | Promise<User | null>;

    users: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User[] | Promise<User[]>;

    document: (
      parent: undefined,
      args: ArgsDocument,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Document | null | Promise<Document | null>;

    documents: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Document[] | Promise<Document[]>;
  }
}

export namespace SessionResolvers {
  export const defaultResolvers = {
    iat: (parent: Session) => parent.iat,
    user: (parent: Session) => parent.user,
  };

  export type IatResolver = (
    parent: Session,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => number | Promise<number>;

  export type UserResolver = (
    parent: Session,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | Promise<User>;

  export interface Type {
    iat: (
      parent: Session,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => number | Promise<number>;

    user: (
      parent: Session,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | Promise<User>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    password: (parent: User) => parent.password,
    lastLogin: (parent: User) => (parent.lastLogin === undefined ? null : parent.lastLogin),
    createdAt: (parent: User) => parent.createdAt,
    updatedAt: (parent: User) => parent.updatedAt,
    role: (parent: User) => parent.role,
  };

  export type CreatedAtResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type DocumentsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Document[] | Promise<Document[]>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type LastLoginResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type PasswordResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type ProfileResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Profile | Promise<Profile>;

  export type RoleResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Role | Promise<Role>;

  export type UpdatedAtResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export interface Type {
    createdAt: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    documents: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Document[] | Promise<Document[]>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    lastLogin: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    password: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    profile: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Profile | Promise<Profile>;

    role: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Role | Promise<Role>;

    updatedAt: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;
  }
}

export namespace DocumentResolvers {
  export const defaultResolvers = {
    id: (parent: Document) => parent.id,
    publishDate: (parent: Document) => parent.publishDate,
    title: (parent: Document) => parent.title,
    createdAt: (parent: Document) => parent.createdAt,
    updatedAt: (parent: Document) => parent.updatedAt,
  };

  export type AuthorResolver = (
    parent: Document,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | Promise<User>;

  export type CreatedAtResolver = (
    parent: Document,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type IdResolver = (
    parent: Document,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type PublishDateResolver = (
    parent: Document,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type TitleResolver = (
    parent: Document,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Document,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export interface Type {
    author: (
      parent: Document,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | Promise<User>;

    createdAt: (
      parent: Document,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    id: (
      parent: Document,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    publishDate: (
      parent: Document,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    title: (
      parent: Document,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    updatedAt: (
      parent: Document,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;
  }
}

export namespace ProfileResolvers {
  export const defaultResolvers = {
    id: (parent: Profile) => parent.id,
    dateOfBirth: (parent: Profile) =>
      parent.dateOfBirth === undefined ? null : parent.dateOfBirth,
    createdAt: (parent: Profile) => parent.createdAt,
    updatedAt: (parent: Profile) => parent.updatedAt,
  };

  export type AvatarResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => File | null | Promise<File | null>;

  export type CreatedAtResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type DateOfBirthResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type FirstNameResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type IdResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type LastNameResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type UpdatedAtResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type UserResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | Promise<User>;

  export interface Type {
    avatar: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => File | null | Promise<File | null>;

    createdAt: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    dateOfBirth: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    firstName: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    id: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    lastName: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    updatedAt: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    user: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | Promise<User>;
  }
}

export namespace FileResolvers {
  export const defaultResolvers = {
    id: (parent: File) => parent.id,
    mimetype: (parent: File) => parent.mimetype,
    encoding: (parent: File) => parent.encoding,
    key: (parent: File) => parent.key,
    etag: (parent: File) => parent.etag,
    bucket: (parent: File) => parent.bucket,
    size: (parent: File) => parent.size,
    url: (parent: File) => parent.url,
    createdAt: (parent: File) => parent.createdAt,
    updatedAt: (parent: File) => parent.updatedAt,
  };

  export type BucketResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type CreatedAtResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type EncodingResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type EtagResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type IdResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type KeyResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type MimetypeResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export type SizeResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => number | Promise<number>;

  export type UpdatedAtResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type UrlResolver = (
    parent: File,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | Promise<string>;

  export interface Type {
    bucket: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    createdAt: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    encoding: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    etag: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    id: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    key: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    mimetype: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;

    size: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => number | Promise<number>;

    updatedAt: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    url: (
      parent: File,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | Promise<string>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface LoginInput {
    email: string;
    password: string;
  }
  export interface UserCreateInput {
    email: string;
    password: string;
    repeatPassword: string;
    firstName: string;
    lastName: string;
    role: Role;
    avatar: string | null;
  }
  export interface UserUpdateInput {
    email: string;
    firstName: string;
    lastName: string;
    password: string | null;
    repeatPassword: string | null;
    role: Role;
    avatar: string | null;
  }
  export interface DocumentCreateInput {
    title: string;
    publishDate: string;
    type: string;
    author: string;
  }
  export interface DocumentUpdateInput {
    title: string;
    publishDate: string;
    type: string;
    author: string;
  }

  export interface ArgsLogin {
    input: LoginInput;
  }

  export interface ArgsUploadFile {
    file: string;
  }

  export interface ArgsDeleteFile {
    id: string;
  }

  export interface ArgsCreateUser {
    input: UserCreateInput;
  }

  export interface ArgsDeleteUser {
    id: string;
  }

  export interface ArgsUpdateUser {
    input: UserUpdateInput;
    id: string;
  }

  export interface ArgsCreateDocument {
    input: DocumentCreateInput;
  }

  export interface ArgsUpdateDocument {
    input: DocumentUpdateInput;
    id: string;
  }

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type UploadFileResolver = (
    parent: undefined,
    args: ArgsUploadFile,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => File | Promise<File>;

  export type DeleteFileResolver = (
    parent: undefined,
    args: ArgsDeleteFile,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => File | null | Promise<File | null>;

  export type CreateUserResolver = (
    parent: undefined,
    args: ArgsCreateUser,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | Promise<User>;

  export type DeleteUserResolver = (
    parent: undefined,
    args: ArgsDeleteUser,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | null | Promise<User | null>;

  export type UpdateUserResolver = (
    parent: undefined,
    args: ArgsUpdateUser,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | null | Promise<User | null>;

  export type CreateDocumentResolver = (
    parent: undefined,
    args: ArgsCreateDocument,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Document | Promise<Document>;

  export type UpdateDocumentResolver = (
    parent: undefined,
    args: ArgsUpdateDocument,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Document | null | Promise<Document | null>;

  export interface Type {
    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    uploadFile: (
      parent: undefined,
      args: ArgsUploadFile,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => File | Promise<File>;

    deleteFile: (
      parent: undefined,
      args: ArgsDeleteFile,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => File | null | Promise<File | null>;

    createUser: (
      parent: undefined,
      args: ArgsCreateUser,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | Promise<User>;

    deleteUser: (
      parent: undefined,
      args: ArgsDeleteUser,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | null | Promise<User | null>;

    updateUser: (
      parent: undefined,
      args: ArgsUpdateUser,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | null | Promise<User | null>;

    createDocument: (
      parent: undefined,
      args: ArgsCreateDocument,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Document | Promise<Document>;

    updateDocument: (
      parent: undefined,
      args: ArgsUpdateDocument,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Document | null | Promise<Document | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Session: SessionResolvers.Type;
  User: UserResolvers.Type;
  Document: DocumentResolvers.Type;
  Profile: ProfileResolvers.Type;
  File: FileResolvers.Type;
  Mutation: MutationResolvers.Type;
}
