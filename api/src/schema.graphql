enum Role {
  ADMIN
  EDITOR
  USER
  VIEWER
  UNAUTHORIZED
}

enum Position {
  TOP
  TOP_RIGHT
  RIGHT
  BOTTOM_RIGHT
  BOTTOM
  BOTTOM_LEFT
  LEFT
  TOP_LEFT
}

scalar DateTime
scalar Upload
scalar Date

type Query {
  session: Session
  files: [File!]!
  user(id: ID!): User
  users: [User!]!
  document(id: ID!): Document
  documents: [Document!]!
  layouts: [Layout!]!
}

type Mutation {
  login(email: String!, password: String!): String
  uploadFile(file: Upload!): File!
  deleteFile(id: ID!): File
  createUser(input: UserCreateInput!): User!
  deleteUser(id: ID!): User
  updateUser(input: UserUpdateInput!, id: ID!): User
  createDocument(input: DocumentCreateInput!): Document!
  updateDocument(input: DocumentUpdateInput!, id: String!): Document
  deleteDocument(id: ID!): Document
}

input UserCreateInput {
  email: String!
  password: String!
  repeatPassword: String!
  firstName: String!
  lastName: String!
  role: Role!
  avatar: ID
}

input UserUpdateInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String
  repeatPassword: String
  role: Role!
  avatar: ID
}

input DocumentCreateInput {
  title: String!
  publishDate: DateTime!
  type: ID!
  author: ID!
}

input DocumentUpdateInput {
  title: String!
  publishDate: DateTime!
  type: ID!
  author: ID!
}

type Session {
  iat: Int!
  user: User!
}

type User {
  createdAt: Date!
  documents: [Document!]!
  email: String!
  id: ID!
  profile: Profile!
  role: Role!
  updatedAt: Date
}

type Profile {
  avatar: File
  createdAt: Date!
  dateOfBirth: Date
  firstName: String!
  id: ID!
  lastName: String!
  lastLogin: Date
  updatedAt: Date
  user: User!
}

type Document {
  id: ID!
  layout: Layout!
  title: String!
  author: User!
  tags: [Tag!]!
  category: Category
  publishedAt: Date!
  createdAt: Date!
  updatedAt: Date
}

type Layout {
  id: ID!
  title: String!
  createdAt: Date!
  updatedAt: Date
}

enum FieldConfigType {
  PLAIN_TEXT
  ASSETS
}

interface FieldConfig {
  id: ID!
  type: FieldConfigType
  layout: Layout
  handle: String!
  required: Boolean!
  instructions: String
  createdAt: Date!
  updatedAt: Date
}

type FieldConfigPlainText implements FieldConfig {
  id: ID!
  type: FieldConfigType
  layout: Layout
  handle: String!
  required: Boolean!
  instructions: String
  createdAt: Date!
  updatedAt: Date
}

type FieldConfigAssets implements FieldConfig {
  id: ID!
  type: FieldConfigType
  layout: Layout
  handle: String!
  required: Boolean!
  instructions: String
  minimum: Int!
  maximum: Int
  createdAt: Date!
  updatedAt: Date
}

# type CheckboxOption {
#   id: ID!
#   name: String!
#   value: String!
#   checkbox: CheckboxField
# }

# type CheckboxField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
#   options: [CheckboxOption!]
#   value: CheckboxOption
# }

# type ColorField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
#   value: String
# }

# type DateTimeField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
#   value: DateTime
# }

# type DropdownOption {
#   id: ID!
#   name: String!
#   value: String!
#   dropdown: DropdownField
# }

# type DropdownField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
#   options: [DropdownOption!]!
#   value: DropdownOption
# }

# type DocumentField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
#   min: Int!
#   max: Int!
#   category: Category
#   tags: [Tag!]
#   value: [Document!]
# }

# type MatrixField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
# }

# type MultiSelectField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
# }

# type NumberField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
#   value: Float!
# }

# type MarkdownField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
#   value: String!
# }

# type RadioField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
# }

# type PositionField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
#   value: Position
# }

# type CategoryField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
#   value: [Category!]
# }

# type TagField implements Field {
#   id: ID!
#   document: Document!
#   name: String!
#   handle: String!
#   required: Boolean!
#   value: [Tag!]
# }

type File {
  bucket: String!
  createdAt: Date!
  encoding: String!
  etag: String!
  id: ID!
  key: String!
  mimetype: String!
  size: Int!
  updatedAt: Date
  url: String!
}

type Category {
  id: ID!
  title: String!
  documents: [Document!]!
  createdAt: Date!
  updatedAt: Date!
}

type Tag {
  id: ID!
  title: String!
  documents: [Document!]
  createdAt: Date!
  updatedAt: Date!
}