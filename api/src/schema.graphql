enum Role {
  ADMIN
  EDITOR
  USER
  VIEWER
  UNAUTHORIZED
}

scalar DateTime
scalar Upload
scalar Date

type Query {
  session: Session
  files: [File!]!
  user(id: ID!): User
  users: [User!]!
  document(id: ID!): Document
  documents: [Document!]!
}

type Mutation {
  login(email: String!, password: String!): String
  uploadFile(file: Upload!): File!
  deleteFile(id: ID!): File
  createUser(input: UserCreateInput!): User!
  deleteUser(id: ID!): User
  updateUser(input: UserUpdateInput!, id: ID!): User
  createDocument(input: DocumentCreateInput!): Document!
  updateDocument(input: DocumentUpdateInput!, id: String!): Document
}

input UserCreateInput {
  email: String!
  password: String!
  repeatPassword: String!
  firstName: String!
  lastName: String!
  role: Role!
  avatar: ID
}

input UserUpdateInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String
  repeatPassword: String
  role: Role!
  avatar: ID
}

input DocumentCreateInput {
  title: String!
  publishDate: DateTime!
  type: ID!
  author: ID!
}

input DocumentUpdateInput {
  title: String!
  publishDate: DateTime!
  type: ID!
  author: ID!
}

type Session {
  iat: Int!
  user: User!
}

type User {
  createdAt: Date!
  documents: [Document!]!
  email: String!
  id: ID!
  password: String!
  profile: Profile!
  role: Role!
  updatedAt: Date
}

type Profile {
  avatar: File
  createdAt: Date!
  dateOfBirth: Date
  firstName: String!
  id: ID!
  lastName: String!
  lastLogin: Date
  updatedAt: Date
  user: User!
}

type Document {
  author: User!
  createdAt: Date!
  id: ID!
  publishedAt: Date!
  title: String!
  updatedAt: Date
  content: [Content!]!
}

interface Content {
  id: ID!
  createdAt: Date!
  updatedAt: Date
  document: Document!
  name: String!
}

type TextContent implements Content {
  id: ID!
  createdAt: Date!
  updatedAt: Date
  document: Document!
  name: String!
  text: String!
}

type FileContent implements Content {
  id: ID!
  createdAt: Date!
  updatedAt: Date
  document: Document!
  name: String!
  files: [File!]!
}

type File {
  bucket: String!
  createdAt: Date!
  encoding: String!
  etag: String!
  id: ID!
  key: String!
  mimetype: String!
  size: Int!
  updatedAt: Date
  url: String!
}
